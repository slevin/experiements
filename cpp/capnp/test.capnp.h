// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: test.capnp

#ifndef CAPNP_INCLUDED_9c1d78015c5c49ee_
#define CAPNP_INCLUDED_9c1d78015c5c49ee_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 4001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif



struct Person {
  Person() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct PhoneNumber;
};

struct Person::PhoneNumber {
  PhoneNumber() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum class Type: uint16_t {
    MOBILE,
    HOME,
    WORK,
  };

};

struct Date {
  Date() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};


// =======================================================================================

namespace capnp {
namespace schemas {

extern const ::capnp::_::RawSchema s_ddb036b895453264;
extern const ::capnp::_::RawSchema s_80c6d11610cf8d4c;
extern const ::capnp::_::RawSchema s_e4921e19d3f8cec1;
extern const ::capnp::_::RawSchema s_e5ea61ec12b6fc27;

}  // namespace schemas
namespace _ {  // private

CAPNP_DECLARE_STRUCT(
    ::Person, ddb036b895453264,
    0, 4, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::Person::PhoneNumber, 80c6d11610cf8d4c,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_ENUM(
    ::Person::PhoneNumber::Type, e4921e19d3f8cec1);
CAPNP_DECLARE_STRUCT(
    ::Date, e5ea61ec12b6fc27,
    1, 0, FOUR_BYTES);

}  // namespace _ (private)
}  // namespace capnp

// =======================================================================================


class Person::Reader {
public:
  typedef Person Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasEmail() const;
  inline  ::capnp::Text::Reader getEmail() const;

  inline bool hasPhones() const;
  inline  ::capnp::List< ::Person::PhoneNumber>::Reader getPhones() const;

  inline bool hasBirthdate() const;
  inline  ::Date::Reader getBirthdate() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Person::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Person::Reader reader) {
  return ::capnp::_::structString<Person>(reader._reader);
}

class Person::Builder {
public:
  typedef Person Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasEmail();
  inline  ::capnp::Text::Builder getEmail();
  inline void setEmail( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEmail(unsigned int size);
  inline void adoptEmail(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEmail();

  inline bool hasPhones();
  inline  ::capnp::List< ::Person::PhoneNumber>::Builder getPhones();
  inline void setPhones( ::capnp::List< ::Person::PhoneNumber>::Reader value);
  inline  ::capnp::List< ::Person::PhoneNumber>::Builder initPhones(unsigned int size);
  inline void adoptPhones(::capnp::Orphan< ::capnp::List< ::Person::PhoneNumber>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Person::PhoneNumber>> disownPhones();

  inline bool hasBirthdate();
  inline  ::Date::Builder getBirthdate();
  inline void setBirthdate( ::Date::Reader value);
  inline  ::Date::Builder initBirthdate();
  inline void adoptBirthdate(::capnp::Orphan< ::Date>&& value);
  inline ::capnp::Orphan< ::Date> disownBirthdate();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Person::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Person::Builder builder) {
  return ::capnp::_::structString<Person>(builder._builder.asReader());
}

class Person::Pipeline {
public:
  typedef Person Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Date::Pipeline getBirthdate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class Person::PhoneNumber::Reader {
public:
  typedef PhoneNumber Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasNumber() const;
  inline  ::capnp::Text::Reader getNumber() const;

  inline  ::Person::PhoneNumber::Type getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Person::PhoneNumber::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Person::PhoneNumber::Reader reader) {
  return ::capnp::_::structString<Person::PhoneNumber>(reader._reader);
}

class Person::PhoneNumber::Builder {
public:
  typedef PhoneNumber Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasNumber();
  inline  ::capnp::Text::Builder getNumber();
  inline void setNumber( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNumber(unsigned int size);
  inline void adoptNumber(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNumber();

  inline  ::Person::PhoneNumber::Type getType();
  inline void setType( ::Person::PhoneNumber::Type value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Person::PhoneNumber::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Person::PhoneNumber::Builder builder) {
  return ::capnp::_::structString<Person::PhoneNumber>(builder._builder.asReader());
}

class Person::PhoneNumber::Pipeline {
public:
  typedef PhoneNumber Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class Date::Reader {
public:
  typedef Date Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::int16_t getYear() const;

  inline  ::uint8_t getMonth() const;

  inline  ::uint8_t getDay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Date::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Date::Reader reader) {
  return ::capnp::_::structString<Date>(reader._reader);
}

class Date::Builder {
public:
  typedef Date Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::int16_t getYear();
  inline void setYear( ::int16_t value);

  inline  ::uint8_t getMonth();
  inline void setMonth( ::uint8_t value);

  inline  ::uint8_t getDay();
  inline void setDay( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Date::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Date::Builder builder) {
  return ::capnp::_::structString<Date>(builder._builder.asReader());
}

class Date::Pipeline {
public:
  typedef Date Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

// =======================================================================================

inline bool Person::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Person::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Person::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Person::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Person::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Person::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Person::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Person::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Person::Reader::hasEmail() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Person::Builder::hasEmail() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Person::Reader::getEmail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Person::Builder::getEmail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Person::Builder::setEmail( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Person::Builder::initEmail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Person::Builder::adoptEmail(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Person::Builder::disownEmail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Person::Reader::hasPhones() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Person::Builder::hasPhones() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Person::PhoneNumber>::Reader Person::Reader::getPhones() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Person::PhoneNumber>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Person::PhoneNumber>::Builder Person::Builder::getPhones() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Person::PhoneNumber>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Person::Builder::setPhones( ::capnp::List< ::Person::PhoneNumber>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Person::PhoneNumber>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Person::PhoneNumber>::Builder Person::Builder::initPhones(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Person::PhoneNumber>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Person::Builder::adoptPhones(
    ::capnp::Orphan< ::capnp::List< ::Person::PhoneNumber>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Person::PhoneNumber>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Person::PhoneNumber>> Person::Builder::disownPhones() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Person::PhoneNumber>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Person::Reader::hasBirthdate() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Person::Builder::hasBirthdate() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::Date::Reader Person::Reader::getBirthdate() const {
  return ::capnp::_::PointerHelpers< ::Date>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::Date::Builder Person::Builder::getBirthdate() {
  return ::capnp::_::PointerHelpers< ::Date>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::Date::Pipeline Person::Pipeline::getBirthdate() {
  return  ::Date::Pipeline(_typeless.getPointerField(3));
}
inline void Person::Builder::setBirthdate( ::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::Date>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::Date::Builder Person::Builder::initBirthdate() {
  return ::capnp::_::PointerHelpers< ::Date>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Person::Builder::adoptBirthdate(
    ::capnp::Orphan< ::Date>&& value) {
  ::capnp::_::PointerHelpers< ::Date>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Date> Person::Builder::disownBirthdate() {
  return ::capnp::_::PointerHelpers< ::Date>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Person::PhoneNumber::Reader::hasNumber() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Person::PhoneNumber::Builder::hasNumber() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Person::PhoneNumber::Reader::getNumber() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Person::PhoneNumber::Builder::getNumber() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Person::PhoneNumber::Builder::setNumber( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Person::PhoneNumber::Builder::initNumber(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Person::PhoneNumber::Builder::adoptNumber(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Person::PhoneNumber::Builder::disownNumber() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::Person::PhoneNumber::Type Person::PhoneNumber::Reader::getType() const {
  return _reader.getDataField< ::Person::PhoneNumber::Type>(
      0 * ::capnp::ELEMENTS);
}

inline  ::Person::PhoneNumber::Type Person::PhoneNumber::Builder::getType() {
  return _builder.getDataField< ::Person::PhoneNumber::Type>(
      0 * ::capnp::ELEMENTS);
}
inline void Person::PhoneNumber::Builder::setType( ::Person::PhoneNumber::Type value) {
  _builder.setDataField< ::Person::PhoneNumber::Type>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Date::Reader::getYear() const {
  return _reader.getDataField< ::int16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int16_t Date::Builder::getYear() {
  return _builder.getDataField< ::int16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Date::Builder::setYear( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Date::Reader::getMonth() const {
  return _reader.getDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint8_t Date::Builder::getMonth() {
  return _builder.getDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Date::Builder::setMonth( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Date::Reader::getDay() const {
  return _reader.getDataField< ::uint8_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint8_t Date::Builder::getDay() {
  return _builder.getDataField< ::uint8_t>(
      3 * ::capnp::ELEMENTS);
}
inline void Date::Builder::setDay( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      3 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_9c1d78015c5c49ee_
